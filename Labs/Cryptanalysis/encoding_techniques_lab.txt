# Hackviser CAPT Labs – Cryptanalysis & Encoding Techniques

---

## Lab 1: ASCII Encoding
**Overview:** ASCII (American Standard Code for Information Interchange) maps characters to numbers (0–127), including letters, digits, and punctuation.  
**Task:** Decode: 83 116 97 114 114 121 78 105 103 104 116 86 97 110 71 111 103 104  
**Execution:**  
echo 83 116 97 114 114 121 78 105 103 104 116 86 97 110 71 111 103 104 | awk '{for(i=1;i<=NF;i++) printf "%c", $i; print ""}'  
**Result:** StarryNightVanGogh

---

## Lab 2: Base64 Encoding
**Overview:** Base64 encodes binary data into 64 printable ASCII characters for secure transmission.  
**Task:** Decode: TW9uYUxpc2FEYVZpbmNp  
**Execution:**  
echo "TW9uYUxpc2FEYVZpbmNp" | base64 --decode  
**Result:** MonaLisaDaVinci

---

## Lab 3: URL Encoding
**Overview:** URL encoding converts unsafe or reserved characters into a `%hex` format for universal URL compatibility.  
**Task:** Decode: %54%68%65%53%63%72%65%61%6D%4D%75%6E%63%68  
**Execution:**  
echo -e $(echo "%54%68%65%53%63%72%65%61%6D%4D%75%6E%63%68" | sed 's/%/\\x/g')  
**Result:** TheScreamMunch

---

## Lab 4: Hex Encoding
**Overview:** Hexadecimal encoding represents each byte as a two-digit hexadecimal number, making binary data human-readable.  
**Task:** Decode: 54686542697274684F6656656E7573426F74746963656C6C69  
**Execution:**  
echo "54686542697274684F6656656E7573426F74746963656C6C69" | xxd -r -p  
**Result:** TheBirthOfVenusBotticelli

---

## Lab 5: Binary Encoding
**Overview:** Binary encoding converts each byte into an 8-bit sequence of 0s and 1s.  
**Task:** Decode: 01000111 01101001 01110010 01101100 01010111 01101001 01110100 01101000 01000001 01010000 01100101 01100001 01110010 01101100 01000101 01100001 01110010 01110010 01101001 01101110 01100111 01010110 01100101 01110010 01101101 01100101 01100101 01110010  
**Execution:**  
python3 -c 'print("".join([chr(int(b,2)) for b in "01000111 01101001 01110010 01101100 01010111 01101001 01110100 01101000 01000001 01010000 01100101 01100001 01110010 01101100 01000101 01100001 01110010 01110010 01101001 01101110 01100111 01010110 01100101 01110010 01101101 01100101 01100101 01110010".split()]))'  
**Result:** GirlWithAPearlEarringVermeer

---

## Lab 6: Base32 Encoding
**Overview:** Base32 encodes data using 32 printable characters (A-Z, 2-7), providing an alternative to Base64.  
**Task:** Decode: KRUGKUDFOJZWS43UMVXGGZKPMZGWK3LPOJ4UIYLMNE======  
**Execution:**  
echo "KRUGKUDFOJZWS43UMVXGGZKPMZGWK3LPOJ4UIYLMNE======" | base32 --decode  
**Result:** ThePersistenceOfMemoryDali

---

## Lab 7: Quoted-printable Encoding
**Overview:** Quoted-printable encoding converts 8-bit text to 7-bit ASCII, preserving special characters for safe transmission.  
**Task:** Decode: =54=68=65=4E=69=67=68=74=57=61=74=63=68=52=65=6D=62=72=61=6E=64=74  
**Execution:**  
echo "=54=68=65=4E=69=67=68=74=57=61=74=63=68=52=65=6D=62=72=61=6E=64=74" | perl -M MIME::QuotedPrint -ne 'print decode_qp($_)'  
**Result:** TheNightWatchRembrandt

---

## Lab 8: HTML Character Entities
**Overview:** HTML entities represent reserved characters or invisible symbols using numeric (`&#NNN;`) or named (`&name;`) codes.  
**Task:** Decode: &#70;&#105;&#115;&#104;&#101;&#114;&#109;&#101;&#110;&#65;&#116;&#83;&#101;&#97;&#84;&#117;&#114;&#110;&#101;&#114;  
**Execution:**  
echo "&#70;&#105;&#115;&#104;&#101;&#114;&#109;&#101;&#110;&#65;&#116;&#83;&#101;&#97;&#84;&#117;&#114;&#110;&#101;&#114;" | perl -MHTML::Entities -pe 'decode_entities($_)'  
**Result:** FishermenAtSeaTurner

---

## Lab 9: Uuencoding
**Overview:** Uuencoding converts binary files into ASCII text for safe transfer, widely used in legacy systems and email attachments.  
**Task:** Decode the following Uuencoded file:  

begin 0744 odt_uuencoding_file.dat
,5&AE2VES<TML:6UT
`
end


**Execution:**  
1. Create the UUencoded file:  
cat > odt_uuencoding_file.dat << 'EOF'  
begin 0744 odt_uuencoding_file.dat  
,5&AE2VES<TML:6UT  
`  
end  
EOF  

2. Install sharutils (if missing):  
sudo apt install sharutils -y  

3. Decode the file:  
uudecode odt_uuencoding_file.dat  

4. View the decoded content:  
cat odt_uuencoding_file.dat  

**Result:** TheKissKlimt

